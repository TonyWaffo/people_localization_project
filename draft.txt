tools.py

import numpy as np
from utils.config import THRESHOLD, PERSON_LABEL, MASK_COLOR, ALPHA
from PIL import Image
import os

# Fonction pour traiter les sorties d'inférence du modèle
def process_inference(model_output, image,mask_folder):
    np_masks = []
    # Extraire les masques, les scores, et les labels de la sortie du modèle
    masks = model_output[0]['masks']
    scores = model_output[0]['scores']
    labels = model_output[0]['labels']

    # Convertir l'image en tableau numpy
    img_np = np.array(image)

    # Parcourir chaque prédiction pour appliquer le seuil et le label
    for i, (mask, score, label) in enumerate(zip(masks, scores, labels)):
    
        # Appliquer le seuil et vérifier si le label correspond à une personne
        if score > THRESHOLD and label == PERSON_LABEL:
            
            # Convertir le masque en tableau numpy et l'appliquer à l'image            
            mask_np = mask[0].mul(255).byte().cpu().numpy() > (THRESHOLD * 255) 
            np_masks.append(mask_np)            

            for c in range(3):
                img_np[:, :, c] = np.where(mask_np, 
                                        (ALPHA * MASK_COLOR[c] + (1 - ALPHA) * img_np[:, :, c]),
                                        img_np[:, :, c])
        ## (Optional) save mask
        #'examples/output/saved_masks.npy'
        mask_path=os.path.join(mask_folder,"saved_masks.npy")
        with open(mask_folder, 'wb') as f:
            np.save(f,np_masks)

    # Convertir en image à partir d'un tableau numpy et le renvoyer            
    return Image.fromarray(img_np.astype(np.uint8))

def apply_saved_mask(image):

    # Convertir l'image en tableau numpy
    img_np = np.array(image)
    masks = np.load('examples/output/saved_masks.npy')
    # Parcourir chaque prédiction pour appliquer le seuil et le label
    for i, mask in enumerate(masks):  
        for c in range(3):
            img_np[:, :, c] = np.where(mask, 
                                    (ALPHA * MASK_COLOR[c] + (1 - ALPHA) * img_np[:, :, c]),
                                    img_np[:, :, c])
    
    # Convertir en image à partir d'un tableau numpy et le renvoyer            
    return Image.fromarray(img_np.astype(np.uint8))



main.py modified

import os
from PIL import Image
from utils import model, tools
import torch

# Point d'entrée principal du script
if __name__ == "__main__":

    target_people = [
            #person1
            {"folder":"targets/target1", "src" : "person_1.png"},
            #person2
            {"folder":"targets/target2", "src" : "person_2.png"},
            #person3
            {"folder":"targets/target3", "src" : "person_3.png"},
            #person4
            {"folder":"targets/target4", "src" : "person_4.png"},
            #person5
            {"folder":"targets/target5", "src" : "person_5.png"},
        ]
    #create a function that gonna create a mask from the 5 base images in the taregt folder and store them in 
    #their respective folder

    # Charger le modèle et appliquer les transformations à l'image
    seg_model, transforms = model.get_model()

    for target in target_people:
        # Ouvrir l'image et appliquer les transformations
        image_path = os.path.join(target["folder"], target["src"])
        image = Image.open(image_path)
        transformed_img = transforms(image)

        # Effectuer l'inférence sur l'image transformée sans calculer les gradients
        with torch.no_grad():
            output = seg_model([transformed_img])

        # Traiter le résultat de l'inférence
        result = tools.process_inference(output,image)

    

    #then create another function that gonna apply a mask to an image


    # Définir les répertoires source et de sortie, et le nom de l'image
    source_path_dir = "examples/source"
    output_path_dir = "examples/output"
    image_name = "sample_1.png"

    # Charger le modèle et appliquer les transformations à l'image
    seg_model, transforms = model.get_model()

    # Ouvrir l'image et appliquer les transformations
    image_path = os.path.join(source_path_dir, image_name)
    image = Image.open(image_path)
    transformed_img = transforms(image)
    

    # Effectuer l'inférence sur l'image transformée sans calculer les gradients
    with torch.no_grad():
        output = seg_model([transformed_img])


main.py original
import os
from PIL import Image
from utils import model, tools
import torch

# Point d'entrée principal du script
if __name__ == "__main__":

    # Définir les répertoires source et de sortie, et le nom de l'image
    source_path_dir = "examples/source"
    output_path_dir = "examples/output"
    image_name = "sample_1.png"

    # Charger le modèle et appliquer les transformations à l'image
    seg_model, transforms = model.get_model()

    # Ouvrir l'image et appliquer les transformations
    image_path = os.path.join(source_path_dir, image_name)
    image = Image.open(image_path)
    transformed_img = transforms(image)
    

    # Effectuer l'inférence sur l'image transformée sans calculer les gradients
    with torch.no_grad():
        output = seg_model([transformed_img])

    # Traiter le résultat de l'inférence
    result = tools.process_inference(output,image)
        
    ## (optional) apply saved mask
    #result = tools.apply_saved_mask(image)
    
    result.save(os.path.join(output_path_dir, image_name))
    # result.show()

    # Traiter le résultat de l'inférence
    #result = tools.process_inference(output,image,"examples/output")
        
    ## (optional) apply saved mask
    #result = tools.apply_saved_mask(image)
    
    #result.save(os.path.join(output_path_dir, image_name))
    #result.show()

tools.py original
import numpy as np
from utils.config import THRESHOLD, PERSON_LABEL, MASK_COLOR, ALPHA
from PIL import Image

# Fonction pour traiter les sorties d'inférence du modèle
def process_inference(model_output, image):
    np_masks = []
    # Extraire les masques, les scores, et les labels de la sortie du modèle
    masks = model_output[0]['masks']
    scores = model_output[0]['scores']
    labels = model_output[0]['labels']

    # Convertir l'image en tableau numpy
    img_np = np.array(image)

    # Parcourir chaque prédiction pour appliquer le seuil et le label
    for i, (mask, score, label) in enumerate(zip(masks, scores, labels)):
    
        # Appliquer le seuil et vérifier si le label correspond à une personne
        if score > THRESHOLD and label == PERSON_LABEL:
            
            # Convertir le masque en tableau numpy et l'appliquer à l'image            
            mask_np = mask[0].mul(255).byte().cpu().numpy() > (THRESHOLD * 255) 
            np_masks.append(mask_np)            

            for c in range(3):
                img_np[:, :, c] = np.where(mask_np, 
                                        (ALPHA * MASK_COLOR[c] + (1 - ALPHA) * img_np[:, :, c]),
                                        img_np[:, :, c])
    ## (Optional) save mask
        with open('examples/output/saved_masks.npy', 'wb') as f:
            np.save(f,np_masks)

    # Convertir en image à partir d'un tableau numpy et le renvoyer            
    return Image.fromarray(img_np.astype(np.uint8))

def apply_saved_mask(image):

    # Convertir l'image en tableau numpy
    img_np = np.array(image)
    masks = np.load('examples/output/saved_masks.npy')
    # Parcourir chaque prédiction pour appliquer le seuil et le label
    for i, mask in enumerate(masks):  
        for c in range(3):
            img_np[:, :, c] = np.where(mask, 
                                    (ALPHA * MASK_COLOR[c] + (1 - ALPHA) * img_np[:, :, c]),
                                    img_np[:, :, c])
    
    # Convertir en image à partir d'un tableau numpy et le renvoyer            
    return Image.fromarray(img_np.astype(np.uint8))